{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["ContactForm","state","name","number","id","nameInputId","shortid","generate","numberInputId","handleChange","evt","target","value","setState","findByName","contactName","props","contacts","some","handleSubmit","preventDefault","alert","updateState","reset","onSubmit","this","type","onChange","pattern","title","required","Component","Filter","filter","filterContacts","ContactList","onDelete","map","onClick","bind","App","updateStateSubmit","previousState","getVisibleContacts","normalizedFilter","toLowerCase","includes","deleteContacts","contactId","prevState","nextContacts","localStorage","setItem","JSON","stringify","parsedContacts","parse","getItem","contactsList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a46a7ad.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ContactForm.css\";\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string))\r\n      .isRequired,\r\n    updateState: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    id: \"\",\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = (evt) => {\r\n    const { name, value } = evt.target;\r\n\r\n    this.setState({\r\n      id: shortid.generate(),\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  findByName = (contactName) => {\r\n    return this.props.contacts.some(({ name }) => name === contactName);\r\n  };\r\n\r\n  handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    const { name, number, id } = this.state;\r\n\r\n    if (this.findByName(name)) {\r\n      alert(`${name} is already in contacts!`);\r\n      return;\r\n    }\r\n\r\n    this.props.updateState(id, name, number);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={this.handleChange}\r\n            value={this.state.name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            id={this.nameInputId}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            onChange={this.handleChange}\r\n            value={this.state.number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            id={this.numberInputId}\r\n            required\r\n          />\r\n        </label>\r\n        <button>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Filter.css\";\r\n\r\nconst Filter = ({ filter, filterContacts }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <input type=\"text\" value={filter} onChange={filterContacts} />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  filterContacts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactList = ({ contacts, onDelete }) => (\r\n  <ol>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li key={shortid.generate()}>\r\n        {name}: {number}\r\n        <button onClick={onDelete.bind(this, id)}>Delete</button>\r\n      </li>\r\n    ))}\r\n  </ol>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidUpdate(prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n    }\n  }\n\n  componentDidMount() {\n    const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n    if (parsedContacts) {\n      this.setState({\n        contacts: parsedContacts,\n      });\n    }\n  }\n\n  filterContacts = (evt) => {\n    this.setState({ filter: evt.target.value });\n  };\n\n  updateStateSubmit = (id, name, number) => {\n    this.setState((previousState) => ({\n      contacts: [...previousState.contacts, { id, name, number }],\n    }));\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  deleteContacts = (contactId) => {\n    this.setState((previousState) => ({\n      contacts: previousState.contacts.filter(({ id }) => id !== contactId),\n    }));\n  };\n\n  render() {\n    const contactsList = this.getVisibleContacts();\n    const { contacts, filter } = this.state;\n    return (\n      <>\n        <h1>Phonebook</h1>\n\n        <ContactForm contacts={contacts} updateState={this.updateStateSubmit} />\n        <h2>Contacts</h2>\n        <Filter filter={filter} filterContacts={this.filterContacts} />\n        <ContactList contacts={contactsList} onDelete={this.deleteContacts} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}